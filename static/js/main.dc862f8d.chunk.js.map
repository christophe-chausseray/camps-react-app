{"version":3,"sources":["header/Header.tsx","map/useListCampingItems.ts","map/CampingMarker.tsx","map/Map.tsx","App.tsx","serviceWorkerRegistration.ts","mock/handlers.ts","ApolloClient.ts","mock/browser.ts","index.tsx"],"names":["Container","styled","div","Title","h1","Header","LIST_CAMPING_ITEMS","gql","Marker","InfoWindow","CampingMarker","name","useState","infoWindowIsOpen","setInfoWindowIsOpen","data-testid","onMouseEnter","onMouseLeave","icon","mapMarker","width","color","Map","markers","data","useQuery","undefined","campingItems","campings","useListCampingItems","map","campingItem","lng","location","longitude","lat","latitude","id","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","handlers","graphql","query","req","res","context","cache","setupWorker","InMemoryCache","link","HttpLink","uri","fetch","client","ApolloClient","ssrMode","ssrForceFetchDelay","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dc862f8d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 90px;\n  position: relative;\n  background-color: #2f7510;\n  border-bottom: 1px solid #ffffff;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 30px;\n  font-family: 'Satisfy', cursive;\n  color: #ffffff;\n`;\n\nfunction Header(): JSX.Element {\n  return (\n    <Container>\n      <Title>Le bon camping</Title>\n    </Container>\n  );\n}\n\nexport { Header };\n","import { CampingItem } from './campingItem';\nimport { useQuery, gql } from '@apollo/client';\n\nconst LIST_CAMPING_ITEMS = gql`\n  query listCampingItems {\n    campings {\n      id\n      name\n      location {\n        longitude\n        latitude\n      }\n    }\n  }\n`;\n\nfunction useListCampingItems(): { campingItems: CampingItem[] } {\n  const { data } = useQuery(LIST_CAMPING_ITEMS);\n\n  if (undefined === data) {\n    return {campingItems: []};\n  }\n\n  return { campingItems: data.campings };\n}\n\nexport { useListCampingItems };\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Icon } from '@iconify/react';\nimport mapMarker from '@iconify/icons-mdi/map-marker';\n\nconst Marker = styled.div`\n  display: block;\n`;\n\nconst InfoWindow = styled.div`\n  position: absolute;\n  bottom: 5px;\n  left: -20px;\n  width: 80px;\n  z-index: 1000000;\n  background-color: #3986ac;\n  padding: 10px;\n  border-radius: 5px;\n  box-shadow: 2px 2px 12px rgba(0,0,0,.5);\n  color: #ffff;\n  font-family: ui-sans-serif;\n  &:after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    margin-left: -15px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: #3986ac transparent transparent transparent;\n  }\n`;\n\nfunction CampingMarker({ name }: { name: string }): JSX.Element {\n  const [infoWindowIsOpen, setInfoWindowIsOpen] = useState(false);\n\n  return (\n    <Marker\n      data-testid='camping-marker'\n      onMouseEnter={() => setInfoWindowIsOpen(true)}\n      onMouseLeave={() => setInfoWindowIsOpen(false)}\n    >\n      {infoWindowIsOpen &&\n        <InfoWindow>\n          {name}\n        </InfoWindow>\n      }\n      <Icon\n        icon={mapMarker}\n        width={40}\n        color=\"#2f7510\"\n      />\n    </Marker>\n  );\n}\n\nexport { CampingMarker }\n","\nimport React from 'react';\nimport styled from 'styled-components';\nimport GoogleMapReact from 'google-map-react';\nimport { useListCampingItems } from './useListCampingItems';\nimport { CampingItem } from './campingItem';\nimport { CampingMarker } from './CampingMarker';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 90vh;\n  position: relative;\n`;\n\nfunction Map(): JSX.Element {\n  const center = {\n    lat: 48.7717719,\n    lng: 2.0907224,\n  };\n  const zoom = 8.5;\n  const { campingItems } = useListCampingItems();\n\n  const markers = campingItems.map((campingItem: CampingItem) => {\n    return <CampingMarker\n      lng={campingItem.location.longitude}\n      lat={campingItem.location.latitude}\n      name={campingItem.name}\n      key={campingItem.id}\n    />\n  })\n\n  return (\n    <Container data-testid='camping-map'>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAP_API_KEY }}\n        defaultCenter={center}\n        defaultZoom={zoom}\n      >\n        {markers}\n      </GoogleMapReact>\n    </Container>\n  );\n}\n\nexport { Map };\n","import React from 'react';\nimport { Header } from './header';\nimport { Map } from './map';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nfunction App(): JSX.Element {\n  return (\n    <Container data-testid=\"app-container\">\n      <Header />\n      <Map />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { graphql, GraphQLMockedContext, GraphQLMockedRequest, ResponseComposition } from 'msw';\n\nconst handlers = [\n  // Handles a \"listCampingItems\" query\n  graphql.query('listCampingItems', (req: GraphQLMockedRequest, res: ResponseComposition, context: GraphQLMockedContext<any>) => {\n    const response = res(\n      context.data({\n        campings: [\n          {\n            id: 'bccb351c-e447-4683-acf6-6c9be9a407cb',\n            name: 'CAMPING HUTTOPIA RAMBOUILLET',\n            location: {\n              latitude: 48.630059,\n              longitude: 1.835694,\n            }\n          },\n          {\n            id: 'f8317142-7897-42bc-8f9c-33bb5cc68eec',\n            name: 'CARAVANING LE VAUVERT',\n            location: {\n              latitude: 48.411278,\n              longitude: 2.143939,\n            }\n          }\n        ],\n      }),\n    );\n\n    return response;\n  }),\n];\n\nexport { handlers }\n","import { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\n\nconst cache = new InMemoryCache();\n\nconsole.log(process.env);\nconst link = new HttpLink({\n  uri: `${process.env.REACT_APP_CAMPS_API_HOST}/graphql`,\n  // Use explicit `window.fetch` so tha outgoing requests\n  // are captured and deferred until the Service Worker is ready.\n  //@ts-ignore\n  fetch: (...args) => fetch(...args),\n});\n\nconst client = new ApolloClient({\n  ssrMode: true,\n  ssrForceFetchDelay: 100,\n  cache,\n  link,\n});\n\nexport { client }\n","import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n\n// This configures a Service Worker with the given request handlers.\nconst worker = setupWorker(...handlers);\n\nexport { worker }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { worker } from './mock/browser';\nimport { client } from './ApolloClient';\n\nif ('development' === process.env.NODE_ENV) {\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}